AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  ReleaseName:
    Type: String
    Default: "v2"

  ReleaseWeight:
    Type: Number
    Default: 50

Conditions:
  FullRelease: !Equals [!Ref ReleaseWeight, 100]

Resources:
    OriginReqHandler:
      Type: AWS::Serverless::Function
      Properties:
        Handler: ./edgeHandlers/originResHandler.handler
        Runtime: nodejs18.x
        Role: !GetAtt LambdaRole.Arn
        AutoPublishAlias: live

    OriginResHandler:
      Type: AWS::Serverless::Function
      Properties:
        Handler: ./edgeHandlers/originReqHandler.handler
        Runtime: nodejs18.x
        Role: !GetAtt LambdaRole.Arn
        AutoPublishAlias: live

    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - edgelambda.amazonaws.com
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    CurrentBucket:
      Type: AWS::S3::Bucket

    NextBucket:
      Type: AWS::S3::Bucket

    CurrentBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
          Bucket:
            Ref: CurrentBucket
          PolicyDocument:
              Statement:
              - Action:
                - s3:GetObject
                Effect: Allow
                Resource: !Sub arn:aws:s3:::${CurrentBucket}/*
                Principal:
                  CanonicalUser: !GetAtt CloudFrontIdentity.S3CanonicalUserId

    NextBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
          Bucket:
            Ref: NextBucket
          PolicyDocument:
              Statement:
              - Action:
                - s3:GetObject
                Effect: Allow
                Resource: !Sub arn:aws:s3:::${NextBucket}/*
                Principal:
                  CanonicalUser: !GetAtt CloudFrontIdentity.S3CanonicalUserId

    CloudFrontIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Identity used to acces S3

    CloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultRootObject: index.html
          Origins:
            - Id: S3Origin
              DomainName: !GetAtt CurrentBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontIdentity}
          DefaultCacheBehavior:
                TargetOriginId: S3Origin
                ViewerProtocolPolicy: https-only
                ForwardedValues:
                  QueryString: true
                  Cookies:
                    Forward: all
                  Headers: ['Origin']
                DefaultTTL: 0
                MaxTTL: 0
                MinTTL: 0
                LambdaFunctionAssociations:
                  Fn::If:
                    - FullRelease
                    - []
                    - - EventType: origin-request
                        LambdaFunctionARN: !Ref OriginReqHandler.Version
                      - EventType: origin-response
                        LambdaFunctionARN: !Ref OriginResHandler.Version

